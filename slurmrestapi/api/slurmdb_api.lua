--[[
  Slurm REST API

  API to access and control Slurm

  The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
  Contact: sales@schedmd.com
  Generated by: https://openapi-generator.tech
]]

--package slurmrestapi

local http_request = require "http.request"
local http_util = require "http.util"
local dkjson = require "dkjson"
local basexx = require "basexx"

-- model import
local slurmrestapi_v0_0_40_openapi_accounts_add_cond_resp_str = require "slurmrestapi.model.v0_0_40_openapi_accounts_add_cond_resp_str"
local slurmrestapi_v0_0_40_openapi_accounts_removed_resp = require "slurmrestapi.model.v0_0_40_openapi_accounts_removed_resp"
local slurmrestapi_v0_0_40_openapi_assocs_removed_resp = require "slurmrestapi.model.v0_0_40_openapi_assocs_removed_resp"
local slurmrestapi_v0_0_40_openapi_clusters_removed_resp = require "slurmrestapi.model.v0_0_40_openapi_clusters_removed_resp"
local slurmrestapi_v0_0_40_openapi_instances_resp = require "slurmrestapi.model.v0_0_40_openapi_instances_resp"
local slurmrestapi_v0_0_40_openapi_resp = require "slurmrestapi.model.v0_0_40_openapi_resp"
local slurmrestapi_v0_0_40_openapi_slurmdbd_jobs_resp = require "slurmrestapi.model.v0_0_40_openapi_slurmdbd_jobs_resp"
local slurmrestapi_v0_0_40_openapi_slurmdbd_qos_removed_resp = require "slurmrestapi.model.v0_0_40_openapi_slurmdbd_qos_removed_resp"
local slurmrestapi_v0_0_40_openapi_slurmdbd_stats_resp = require "slurmrestapi.model.v0_0_40_openapi_slurmdbd_stats_resp"
local slurmrestapi_v0_0_40_openapi_users_add_cond_resp_str = require "slurmrestapi.model.v0_0_40_openapi_users_add_cond_resp_str"
local slurmrestapi_v0_0_40_openapi_wckey_removed_resp = require "slurmrestapi.model.v0_0_40_openapi_wckey_removed_resp"
local slurmrestapi_v0_0_41_openapi_accounts_add_cond_resp_str = require "slurmrestapi.model.v0_0_41_openapi_accounts_add_cond_resp_str"
local slurmrestapi_v0_0_41_openapi_accounts_removed_resp = require "slurmrestapi.model.v0_0_41_openapi_accounts_removed_resp"
local slurmrestapi_v0_0_41_openapi_assocs_removed_resp = require "slurmrestapi.model.v0_0_41_openapi_assocs_removed_resp"
local slurmrestapi_v0_0_41_openapi_clusters_removed_resp = require "slurmrestapi.model.v0_0_41_openapi_clusters_removed_resp"
local slurmrestapi_v0_0_41_openapi_instances_resp = require "slurmrestapi.model.v0_0_41_openapi_instances_resp"
local slurmrestapi_v0_0_41_openapi_resp = require "slurmrestapi.model.v0_0_41_openapi_resp"
local slurmrestapi_v0_0_41_openapi_slurmdbd_jobs_resp = require "slurmrestapi.model.v0_0_41_openapi_slurmdbd_jobs_resp"
local slurmrestapi_v0_0_41_openapi_slurmdbd_qos_removed_resp = require "slurmrestapi.model.v0_0_41_openapi_slurmdbd_qos_removed_resp"
local slurmrestapi_v0_0_41_openapi_slurmdbd_stats_resp = require "slurmrestapi.model.v0_0_41_openapi_slurmdbd_stats_resp"
local slurmrestapi_v0_0_41_openapi_users_add_cond_resp_str = require "slurmrestapi.model.v0_0_41_openapi_users_add_cond_resp_str"
local slurmrestapi_v0_0_41_openapi_wckey_removed_resp = require "slurmrestapi.model.v0_0_41_openapi_wckey_removed_resp"
local slurmrestapi_v0_0_40_openapi_accounts_add_cond_resp = require "slurmrestapi.model.v0_0_40_openapi_accounts_add_cond_resp"
local slurmrestapi_v0_0_40_openapi_accounts_resp = require "slurmrestapi.model.v0_0_40_openapi_accounts_resp"
local slurmrestapi_v0_0_40_openapi_assocs_resp = require "slurmrestapi.model.v0_0_40_openapi_assocs_resp"
local slurmrestapi_v0_0_40_openapi_clusters_resp = require "slurmrestapi.model.v0_0_40_openapi_clusters_resp"
local slurmrestapi_v0_0_40_openapi_slurmdbd_config_resp = require "slurmrestapi.model.v0_0_40_openapi_slurmdbd_config_resp"
local slurmrestapi_v0_0_40_openapi_slurmdbd_qos_resp = require "slurmrestapi.model.v0_0_40_openapi_slurmdbd_qos_resp"
local slurmrestapi_v0_0_40_openapi_tres_resp = require "slurmrestapi.model.v0_0_40_openapi_tres_resp"
local slurmrestapi_v0_0_40_openapi_users_add_cond_resp = require "slurmrestapi.model.v0_0_40_openapi_users_add_cond_resp"
local slurmrestapi_v0_0_40_openapi_users_resp = require "slurmrestapi.model.v0_0_40_openapi_users_resp"
local slurmrestapi_v0_0_40_openapi_wckey_resp = require "slurmrestapi.model.v0_0_40_openapi_wckey_resp"
local slurmrestapi_v0_0_41_openapi_accounts_add_cond_resp = require "slurmrestapi.model.v0_0_41_openapi_accounts_add_cond_resp"
local slurmrestapi_v0_0_41_openapi_accounts_resp = require "slurmrestapi.model.v0_0_41_openapi_accounts_resp"
local slurmrestapi_v0_0_41_openapi_assocs_resp = require "slurmrestapi.model.v0_0_41_openapi_assocs_resp"
local slurmrestapi_v0_0_41_openapi_clusters_resp = require "slurmrestapi.model.v0_0_41_openapi_clusters_resp"
local slurmrestapi_v0_0_41_openapi_slurmdbd_config_resp = require "slurmrestapi.model.v0_0_41_openapi_slurmdbd_config_resp"
local slurmrestapi_v0_0_41_openapi_slurmdbd_qos_resp = require "slurmrestapi.model.v0_0_41_openapi_slurmdbd_qos_resp"
local slurmrestapi_v0_0_41_openapi_tres_resp = require "slurmrestapi.model.v0_0_41_openapi_tres_resp"
local slurmrestapi_v0_0_41_openapi_users_add_cond_resp = require "slurmrestapi.model.v0_0_41_openapi_users_add_cond_resp"
local slurmrestapi_v0_0_41_openapi_users_resp = require "slurmrestapi.model.v0_0_41_openapi_users_resp"
local slurmrestapi_v0_0_41_openapi_wckey_resp = require "slurmrestapi.model.v0_0_41_openapi_wckey_resp"

local slurmdb_api = {}
local slurmdb_api_mt = {
	__name = "slurmdb_api";
	__index = slurmdb_api;
}

local function new_slurmdb_api(authority, basePath, schemes)
	local schemes_map = {}
	for _,v in ipairs(schemes) do
		schemes_map[v] = v
	end
	local default_scheme = schemes_map.https or schemes_map.http
	local host, port = http_util.split_authority(authority, default_scheme)
	return setmetatable({
		host = host;
		port = port;
		basePath = basePath or "http://localhost";
		schemes = schemes_map;
		default_scheme = default_scheme;
		http_username = nil;
		http_password = nil;
		api_key = {};
		access_token = nil;
	}, slurmdb_api_mt)
end

function slurmdb_api:slurmdb_v0040_delete_account(account_name)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.40/account/%s",
			self.basePath, account_name);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "DELETE")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_40_openapi_accounts_removed_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0040_delete_association(account, cluster, default_qos, format, id, only_defaults, parent_account, partition, qos, usage_end, usage_start, user, with_usage, with_deleted, with_raw_qos, with_sub_accts, without_parent_info, without_parent_limits)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.40/association?account=%s&cluster=%s&default_qos=%s&format=%s&id=%s&only_defaults=%s&parent_account=%s&partition=%s&qos=%s&usage_end=%s&usage_start=%s&user=%s&with_usage=%s&with_deleted=%s&with_raw_qos=%s&with_sub_accts=%s&without_parent_info=%s&without_parent_limits=%s",
			self.basePath, http_util.encodeURIComponent(account), http_util.encodeURIComponent(cluster), http_util.encodeURIComponent(default_qos), http_util.encodeURIComponent(format), http_util.encodeURIComponent(id), http_util.encodeURIComponent(only_defaults), http_util.encodeURIComponent(parent_account), http_util.encodeURIComponent(partition), http_util.encodeURIComponent(qos), http_util.encodeURIComponent(usage_end), http_util.encodeURIComponent(usage_start), http_util.encodeURIComponent(user), http_util.encodeURIComponent(with_usage), http_util.encodeURIComponent(with_deleted), http_util.encodeURIComponent(with_raw_qos), http_util.encodeURIComponent(with_sub_accts), http_util.encodeURIComponent(without_parent_info), http_util.encodeURIComponent(without_parent_limits));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "DELETE")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_40_openapi_assocs_removed_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0040_delete_associations(account, cluster, default_qos, format, id, only_defaults, parent_account, partition, qos, usage_end, usage_start, user, with_usage, with_deleted, with_raw_qos, with_sub_accts, without_parent_info, without_parent_limits)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.40/associations?account=%s&cluster=%s&default_qos=%s&format=%s&id=%s&only_defaults=%s&parent_account=%s&partition=%s&qos=%s&usage_end=%s&usage_start=%s&user=%s&with_usage=%s&with_deleted=%s&with_raw_qos=%s&with_sub_accts=%s&without_parent_info=%s&without_parent_limits=%s",
			self.basePath, http_util.encodeURIComponent(account), http_util.encodeURIComponent(cluster), http_util.encodeURIComponent(default_qos), http_util.encodeURIComponent(format), http_util.encodeURIComponent(id), http_util.encodeURIComponent(only_defaults), http_util.encodeURIComponent(parent_account), http_util.encodeURIComponent(partition), http_util.encodeURIComponent(qos), http_util.encodeURIComponent(usage_end), http_util.encodeURIComponent(usage_start), http_util.encodeURIComponent(user), http_util.encodeURIComponent(with_usage), http_util.encodeURIComponent(with_deleted), http_util.encodeURIComponent(with_raw_qos), http_util.encodeURIComponent(with_sub_accts), http_util.encodeURIComponent(without_parent_info), http_util.encodeURIComponent(without_parent_limits));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "DELETE")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_40_openapi_assocs_removed_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0040_delete_cluster(cluster_name, classification, cluster, federation, flags, format, rpc_version, usage_end, usage_start, with_deleted, with_usage)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.40/cluster/%s?classification=%s&cluster=%s&federation=%s&flags=%s&format=%s&rpc_version=%s&usage_end=%s&usage_start=%s&with_deleted=%s&with_usage=%s",
			self.basePath, cluster_name, http_util.encodeURIComponent(classification), http_util.encodeURIComponent(cluster), http_util.encodeURIComponent(federation), http_util.encodeURIComponent(flags), http_util.encodeURIComponent(format), http_util.encodeURIComponent(rpc_version), http_util.encodeURIComponent(usage_end), http_util.encodeURIComponent(usage_start), http_util.encodeURIComponent(with_deleted), http_util.encodeURIComponent(with_usage));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "DELETE")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_40_openapi_clusters_removed_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0040_delete_single_qos(qos)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.40/qos/%s",
			self.basePath, qos);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "DELETE")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_40_openapi_slurmdbd_qos_removed_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0040_delete_user(name)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.40/user/%s",
			self.basePath, name);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "DELETE")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_40_openapi_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0040_delete_wckey(id)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.40/wckey/%s",
			self.basePath, id);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "DELETE")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_40_openapi_wckey_removed_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0040_get_account(account_name, with_assocs, with_coords, with_deleted)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.40/account/%s?with_assocs=%s&with_coords=%s&with_deleted=%s",
			self.basePath, account_name, http_util.encodeURIComponent(with_assocs), http_util.encodeURIComponent(with_coords), http_util.encodeURIComponent(with_deleted));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_40_openapi_accounts_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0040_get_accounts(description, with_assocs, with_coords, with_deleted)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.40/accounts?description=%s&with_assocs=%s&with_coords=%s&with_deleted=%s",
			self.basePath, http_util.encodeURIComponent(description), http_util.encodeURIComponent(with_assocs), http_util.encodeURIComponent(with_coords), http_util.encodeURIComponent(with_deleted));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_40_openapi_accounts_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0040_get_association(account, cluster, default_qos, format, id, only_defaults, parent_account, partition, qos, usage_end, usage_start, user, with_usage, with_deleted, with_raw_qos, with_sub_accts, without_parent_info, without_parent_limits)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.40/association?account=%s&cluster=%s&default_qos=%s&format=%s&id=%s&only_defaults=%s&parent_account=%s&partition=%s&qos=%s&usage_end=%s&usage_start=%s&user=%s&with_usage=%s&with_deleted=%s&with_raw_qos=%s&with_sub_accts=%s&without_parent_info=%s&without_parent_limits=%s",
			self.basePath, http_util.encodeURIComponent(account), http_util.encodeURIComponent(cluster), http_util.encodeURIComponent(default_qos), http_util.encodeURIComponent(format), http_util.encodeURIComponent(id), http_util.encodeURIComponent(only_defaults), http_util.encodeURIComponent(parent_account), http_util.encodeURIComponent(partition), http_util.encodeURIComponent(qos), http_util.encodeURIComponent(usage_end), http_util.encodeURIComponent(usage_start), http_util.encodeURIComponent(user), http_util.encodeURIComponent(with_usage), http_util.encodeURIComponent(with_deleted), http_util.encodeURIComponent(with_raw_qos), http_util.encodeURIComponent(with_sub_accts), http_util.encodeURIComponent(without_parent_info), http_util.encodeURIComponent(without_parent_limits));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_40_openapi_assocs_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0040_get_associations(account, cluster, default_qos, format, id, only_defaults, parent_account, partition, qos, usage_end, usage_start, user, with_usage, with_deleted, with_raw_qos, with_sub_accts, without_parent_info, without_parent_limits)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.40/associations?account=%s&cluster=%s&default_qos=%s&format=%s&id=%s&only_defaults=%s&parent_account=%s&partition=%s&qos=%s&usage_end=%s&usage_start=%s&user=%s&with_usage=%s&with_deleted=%s&with_raw_qos=%s&with_sub_accts=%s&without_parent_info=%s&without_parent_limits=%s",
			self.basePath, http_util.encodeURIComponent(account), http_util.encodeURIComponent(cluster), http_util.encodeURIComponent(default_qos), http_util.encodeURIComponent(format), http_util.encodeURIComponent(id), http_util.encodeURIComponent(only_defaults), http_util.encodeURIComponent(parent_account), http_util.encodeURIComponent(partition), http_util.encodeURIComponent(qos), http_util.encodeURIComponent(usage_end), http_util.encodeURIComponent(usage_start), http_util.encodeURIComponent(user), http_util.encodeURIComponent(with_usage), http_util.encodeURIComponent(with_deleted), http_util.encodeURIComponent(with_raw_qos), http_util.encodeURIComponent(with_sub_accts), http_util.encodeURIComponent(without_parent_info), http_util.encodeURIComponent(without_parent_limits));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_40_openapi_assocs_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0040_get_cluster(cluster_name, classification, cluster, federation, flags, format, rpc_version, usage_end, usage_start, with_deleted, with_usage)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.40/cluster/%s?classification=%s&cluster=%s&federation=%s&flags=%s&format=%s&rpc_version=%s&usage_end=%s&usage_start=%s&with_deleted=%s&with_usage=%s",
			self.basePath, cluster_name, http_util.encodeURIComponent(classification), http_util.encodeURIComponent(cluster), http_util.encodeURIComponent(federation), http_util.encodeURIComponent(flags), http_util.encodeURIComponent(format), http_util.encodeURIComponent(rpc_version), http_util.encodeURIComponent(usage_end), http_util.encodeURIComponent(usage_start), http_util.encodeURIComponent(with_deleted), http_util.encodeURIComponent(with_usage));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_40_openapi_clusters_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0040_get_clusters(update_time)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.40/clusters?update_time=%s",
			self.basePath, http_util.encodeURIComponent(update_time));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_40_openapi_clusters_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0040_get_config()
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.40/config",
			self.basePath);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_40_openapi_slurmdbd_config_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0040_get_diag()
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.40/diag",
			self.basePath);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_40_openapi_slurmdbd_stats_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0040_get_instance(cluster, extra, format, instance_id, instance_type, node_list, time_end, time_start)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.40/instance?cluster=%s&extra=%s&format=%s&instance_id=%s&instance_type=%s&node_list=%s&time_end=%s&time_start=%s",
			self.basePath, http_util.encodeURIComponent(cluster), http_util.encodeURIComponent(extra), http_util.encodeURIComponent(format), http_util.encodeURIComponent(instance_id), http_util.encodeURIComponent(instance_type), http_util.encodeURIComponent(node_list), http_util.encodeURIComponent(time_end), http_util.encodeURIComponent(time_start));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_40_openapi_instances_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0040_get_instances(cluster, extra, format, instance_id, instance_type, node_list, time_end, time_start)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.40/instances?cluster=%s&extra=%s&format=%s&instance_id=%s&instance_type=%s&node_list=%s&time_end=%s&time_start=%s",
			self.basePath, http_util.encodeURIComponent(cluster), http_util.encodeURIComponent(extra), http_util.encodeURIComponent(format), http_util.encodeURIComponent(instance_id), http_util.encodeURIComponent(instance_type), http_util.encodeURIComponent(node_list), http_util.encodeURIComponent(time_end), http_util.encodeURIComponent(time_start));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_40_openapi_instances_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0040_get_job(job_id)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.40/job/%s",
			self.basePath, job_id);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_40_openapi_slurmdbd_jobs_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0040_get_jobs(account, association, cluster, constraints, cpus_max, cpus_min, scheduler_unset, scheduled_on_submit, scheduled_by_main, scheduled_by_backfill, job_started, exit_code, show_duplicates, skip_steps, disable_truncate_usage_time, whole_hetjob, disable_whole_hetjob, disable_wait_for_result, usage_time_as_submit_time, show_batch_script, show_job_environment, format, groups, job_name, nodes_max, nodes_min, partition, qos, reason, reservation, reservation_id, state, step, timelimit_max, timelimit_min, end_time, start_time, submit_time, node, users, wckey)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.40/jobs?account=%s&association=%s&cluster=%s&constraints=%s&cpus_max=%s&cpus_min=%s&scheduler_unset=%s&scheduled_on_submit=%s&scheduled_by_main=%s&scheduled_by_backfill=%s&job_started=%s&exit_code=%s&show_duplicates=%s&skip_steps=%s&disable_truncate_usage_time=%s&whole_hetjob=%s&disable_whole_hetjob=%s&disable_wait_for_result=%s&usage_time_as_submit_time=%s&show_batch_script=%s&show_job_environment=%s&format=%s&groups=%s&job_name=%s&nodes_max=%s&nodes_min=%s&partition=%s&qos=%s&reason=%s&reservation=%s&reservation_id=%s&state=%s&step=%s&timelimit_max=%s&timelimit_min=%s&end_time=%s&start_time=%s&submit_time=%s&node=%s&users=%s&wckey=%s",
			self.basePath, http_util.encodeURIComponent(account), http_util.encodeURIComponent(association), http_util.encodeURIComponent(cluster), http_util.encodeURIComponent(constraints), http_util.encodeURIComponent(cpus_max), http_util.encodeURIComponent(cpus_min), http_util.encodeURIComponent(scheduler_unset), http_util.encodeURIComponent(scheduled_on_submit), http_util.encodeURIComponent(scheduled_by_main), http_util.encodeURIComponent(scheduled_by_backfill), http_util.encodeURIComponent(job_started), http_util.encodeURIComponent(exit_code), http_util.encodeURIComponent(show_duplicates), http_util.encodeURIComponent(skip_steps), http_util.encodeURIComponent(disable_truncate_usage_time), http_util.encodeURIComponent(whole_hetjob), http_util.encodeURIComponent(disable_whole_hetjob), http_util.encodeURIComponent(disable_wait_for_result), http_util.encodeURIComponent(usage_time_as_submit_time), http_util.encodeURIComponent(show_batch_script), http_util.encodeURIComponent(show_job_environment), http_util.encodeURIComponent(format), http_util.encodeURIComponent(groups), http_util.encodeURIComponent(job_name), http_util.encodeURIComponent(nodes_max), http_util.encodeURIComponent(nodes_min), http_util.encodeURIComponent(partition), http_util.encodeURIComponent(qos), http_util.encodeURIComponent(reason), http_util.encodeURIComponent(reservation), http_util.encodeURIComponent(reservation_id), http_util.encodeURIComponent(state), http_util.encodeURIComponent(step), http_util.encodeURIComponent(timelimit_max), http_util.encodeURIComponent(timelimit_min), http_util.encodeURIComponent(end_time), http_util.encodeURIComponent(start_time), http_util.encodeURIComponent(submit_time), http_util.encodeURIComponent(node), http_util.encodeURIComponent(users), http_util.encodeURIComponent(wckey));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_40_openapi_slurmdbd_jobs_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0040_get_qos(description, id, format, name, preempt_mode, with_deleted)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.40/qos?description=%s&id=%s&format=%s&name=%s&preempt_mode=%s&with_deleted=%s",
			self.basePath, http_util.encodeURIComponent(description), http_util.encodeURIComponent(id), http_util.encodeURIComponent(format), http_util.encodeURIComponent(name), http_util.encodeURIComponent(preempt_mode), http_util.encodeURIComponent(with_deleted));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_40_openapi_slurmdbd_qos_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0040_get_single_qos(qos, with_deleted)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.40/qos/%s?with_deleted=%s",
			self.basePath, qos, http_util.encodeURIComponent(with_deleted));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_40_openapi_slurmdbd_qos_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0040_get_tres()
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.40/tres",
			self.basePath);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_40_openapi_tres_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0040_get_user(name, with_deleted, with_assocs, with_coords, with_wckeys)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.40/user/%s?with_deleted=%s&with_assocs=%s&with_coords=%s&with_wckeys=%s",
			self.basePath, name, http_util.encodeURIComponent(with_deleted), http_util.encodeURIComponent(with_assocs), http_util.encodeURIComponent(with_coords), http_util.encodeURIComponent(with_wckeys));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_40_openapi_users_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0040_get_users(admin_level, default_account, default_wckey, with_assocs, with_coords, with_deleted, with_wckeys, without_defaults)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.40/users?admin_level=%s&default_account=%s&default_wckey=%s&with_assocs=%s&with_coords=%s&with_deleted=%s&with_wckeys=%s&without_defaults=%s",
			self.basePath, http_util.encodeURIComponent(admin_level), http_util.encodeURIComponent(default_account), http_util.encodeURIComponent(default_wckey), http_util.encodeURIComponent(with_assocs), http_util.encodeURIComponent(with_coords), http_util.encodeURIComponent(with_deleted), http_util.encodeURIComponent(with_wckeys), http_util.encodeURIComponent(without_defaults));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_40_openapi_users_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0040_get_wckey(id)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.40/wckey/%s",
			self.basePath, id);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_40_openapi_wckey_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0040_get_wckeys(cluster, format, id, name, only_defaults, usage_end, usage_start, user, with_usage, with_deleted)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.40/wckeys?cluster=%s&format=%s&id=%s&name=%s&only_defaults=%s&usage_end=%s&usage_start=%s&user=%s&with_usage=%s&with_deleted=%s",
			self.basePath, http_util.encodeURIComponent(cluster), http_util.encodeURIComponent(format), http_util.encodeURIComponent(id), http_util.encodeURIComponent(name), http_util.encodeURIComponent(only_defaults), http_util.encodeURIComponent(usage_end), http_util.encodeURIComponent(usage_start), http_util.encodeURIComponent(user), http_util.encodeURIComponent(with_usage), http_util.encodeURIComponent(with_deleted));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_40_openapi_wckey_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0040_post_accounts(v0_0_40_openapi_accounts_resp)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.40/accounts",
			self.basePath);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "POST")
	-- TODO: create a function to select proper accept
	--local var_content_type = { "application/json", "application/x-yaml" }
	req.headers:upsert("accept", "application/json")

	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	req:set_body(dkjson.encode(v0_0_40_openapi_accounts_resp))

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_40_openapi_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0040_post_accounts_association(v0_0_40_openapi_accounts_add_cond_resp)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.40/accounts_association",
			self.basePath);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "POST")
	-- TODO: create a function to select proper accept
	--local var_content_type = { "application/json", "application/x-yaml" }
	req.headers:upsert("accept", "application/json")

	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	req:set_body(dkjson.encode(v0_0_40_openapi_accounts_add_cond_resp))

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_40_openapi_accounts_add_cond_resp_str.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0040_post_associations(v0_0_40_openapi_assocs_resp)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.40/associations",
			self.basePath);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "POST")
	-- TODO: create a function to select proper accept
	--local var_content_type = { "application/json", "application/x-yaml" }
	req.headers:upsert("accept", "application/json")

	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	req:set_body(dkjson.encode(v0_0_40_openapi_assocs_resp))

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_40_openapi_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0040_post_clusters(update_time, v0_0_40_openapi_clusters_resp)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.40/clusters?update_time=%s",
			self.basePath, http_util.encodeURIComponent(update_time));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "POST")
	-- TODO: create a function to select proper accept
	--local var_content_type = { "application/json", "application/x-yaml" }
	req.headers:upsert("accept", "application/json")

	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	req:set_body(dkjson.encode(v0_0_40_openapi_clusters_resp))

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_40_openapi_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0040_post_config(v0_0_40_openapi_slurmdbd_config_resp)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.40/config",
			self.basePath);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "POST")
	-- TODO: create a function to select proper accept
	--local var_content_type = { "application/json", "application/x-yaml" }
	req.headers:upsert("accept", "application/json")

	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	req:set_body(dkjson.encode(v0_0_40_openapi_slurmdbd_config_resp))

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_40_openapi_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0040_post_qos(description, id, format, name, preempt_mode, with_deleted, v0_0_40_openapi_slurmdbd_qos_resp)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.40/qos?description=%s&id=%s&format=%s&name=%s&preempt_mode=%s&with_deleted=%s",
			self.basePath, http_util.encodeURIComponent(description), http_util.encodeURIComponent(id), http_util.encodeURIComponent(format), http_util.encodeURIComponent(name), http_util.encodeURIComponent(preempt_mode), http_util.encodeURIComponent(with_deleted));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "POST")
	-- TODO: create a function to select proper accept
	--local var_content_type = { "application/json", "application/x-yaml" }
	req.headers:upsert("accept", "application/json")

	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	req:set_body(dkjson.encode(v0_0_40_openapi_slurmdbd_qos_resp))

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_40_openapi_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0040_post_tres(v0_0_40_openapi_tres_resp)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.40/tres",
			self.basePath);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "POST")
	-- TODO: create a function to select proper accept
	--local var_content_type = { "application/json", "application/x-yaml" }
	req.headers:upsert("accept", "application/json")

	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	req:set_body(dkjson.encode(v0_0_40_openapi_tres_resp))

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_40_openapi_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0040_post_users(v0_0_40_openapi_users_resp)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.40/users",
			self.basePath);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "POST")
	-- TODO: create a function to select proper accept
	--local var_content_type = { "application/json", "application/x-yaml" }
	req.headers:upsert("accept", "application/json")

	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	req:set_body(dkjson.encode(v0_0_40_openapi_users_resp))

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_40_openapi_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0040_post_users_association(update_time, flags, v0_0_40_openapi_users_add_cond_resp)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.40/users_association?update_time=%s&flags=%s",
			self.basePath, http_util.encodeURIComponent(update_time), http_util.encodeURIComponent(flags));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "POST")
	-- TODO: create a function to select proper accept
	--local var_content_type = { "application/json", "application/x-yaml" }
	req.headers:upsert("accept", "application/json")

	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	req:set_body(dkjson.encode(v0_0_40_openapi_users_add_cond_resp))

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_40_openapi_users_add_cond_resp_str.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0040_post_wckeys(cluster, format, id, name, only_defaults, usage_end, usage_start, user, with_usage, with_deleted, v0_0_40_openapi_wckey_resp)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.40/wckeys?cluster=%s&format=%s&id=%s&name=%s&only_defaults=%s&usage_end=%s&usage_start=%s&user=%s&with_usage=%s&with_deleted=%s",
			self.basePath, http_util.encodeURIComponent(cluster), http_util.encodeURIComponent(format), http_util.encodeURIComponent(id), http_util.encodeURIComponent(name), http_util.encodeURIComponent(only_defaults), http_util.encodeURIComponent(usage_end), http_util.encodeURIComponent(usage_start), http_util.encodeURIComponent(user), http_util.encodeURIComponent(with_usage), http_util.encodeURIComponent(with_deleted));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "POST")
	-- TODO: create a function to select proper accept
	--local var_content_type = { "application/json", "application/x-yaml" }
	req.headers:upsert("accept", "application/json")

	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	req:set_body(dkjson.encode(v0_0_40_openapi_wckey_resp))

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_40_openapi_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0041_delete_account(account_name)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.41/account/%s",
			self.basePath, account_name);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "DELETE")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_41_openapi_accounts_removed_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0041_delete_association(account, cluster, default_qos, format, id, only_defaults, parent_account, partition, qos, usage_end, usage_start, user, with_usage, with_deleted, with_raw_qos, with_sub_accts, without_parent_info, without_parent_limits)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.41/association?account=%s&cluster=%s&default_qos=%s&format=%s&id=%s&only_defaults=%s&parent_account=%s&partition=%s&qos=%s&usage_end=%s&usage_start=%s&user=%s&with_usage=%s&with_deleted=%s&with_raw_qos=%s&with_sub_accts=%s&without_parent_info=%s&without_parent_limits=%s",
			self.basePath, http_util.encodeURIComponent(account), http_util.encodeURIComponent(cluster), http_util.encodeURIComponent(default_qos), http_util.encodeURIComponent(format), http_util.encodeURIComponent(id), http_util.encodeURIComponent(only_defaults), http_util.encodeURIComponent(parent_account), http_util.encodeURIComponent(partition), http_util.encodeURIComponent(qos), http_util.encodeURIComponent(usage_end), http_util.encodeURIComponent(usage_start), http_util.encodeURIComponent(user), http_util.encodeURIComponent(with_usage), http_util.encodeURIComponent(with_deleted), http_util.encodeURIComponent(with_raw_qos), http_util.encodeURIComponent(with_sub_accts), http_util.encodeURIComponent(without_parent_info), http_util.encodeURIComponent(without_parent_limits));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "DELETE")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_41_openapi_assocs_removed_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0041_delete_associations(account, cluster, default_qos, format, id, only_defaults, parent_account, partition, qos, usage_end, usage_start, user, with_usage, with_deleted, with_raw_qos, with_sub_accts, without_parent_info, without_parent_limits)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.41/associations?account=%s&cluster=%s&default_qos=%s&format=%s&id=%s&only_defaults=%s&parent_account=%s&partition=%s&qos=%s&usage_end=%s&usage_start=%s&user=%s&with_usage=%s&with_deleted=%s&with_raw_qos=%s&with_sub_accts=%s&without_parent_info=%s&without_parent_limits=%s",
			self.basePath, http_util.encodeURIComponent(account), http_util.encodeURIComponent(cluster), http_util.encodeURIComponent(default_qos), http_util.encodeURIComponent(format), http_util.encodeURIComponent(id), http_util.encodeURIComponent(only_defaults), http_util.encodeURIComponent(parent_account), http_util.encodeURIComponent(partition), http_util.encodeURIComponent(qos), http_util.encodeURIComponent(usage_end), http_util.encodeURIComponent(usage_start), http_util.encodeURIComponent(user), http_util.encodeURIComponent(with_usage), http_util.encodeURIComponent(with_deleted), http_util.encodeURIComponent(with_raw_qos), http_util.encodeURIComponent(with_sub_accts), http_util.encodeURIComponent(without_parent_info), http_util.encodeURIComponent(without_parent_limits));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "DELETE")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_41_openapi_assocs_removed_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0041_delete_cluster(cluster_name, classification, cluster, federation, flags, format, rpc_version, usage_end, usage_start, with_deleted, with_usage)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.41/cluster/%s?classification=%s&cluster=%s&federation=%s&flags=%s&format=%s&rpc_version=%s&usage_end=%s&usage_start=%s&with_deleted=%s&with_usage=%s",
			self.basePath, cluster_name, http_util.encodeURIComponent(classification), http_util.encodeURIComponent(cluster), http_util.encodeURIComponent(federation), http_util.encodeURIComponent(flags), http_util.encodeURIComponent(format), http_util.encodeURIComponent(rpc_version), http_util.encodeURIComponent(usage_end), http_util.encodeURIComponent(usage_start), http_util.encodeURIComponent(with_deleted), http_util.encodeURIComponent(with_usage));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "DELETE")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_41_openapi_clusters_removed_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0041_delete_single_qos(qos)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.41/qos/%s",
			self.basePath, qos);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "DELETE")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_41_openapi_slurmdbd_qos_removed_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0041_delete_user(name)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.41/user/%s",
			self.basePath, name);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "DELETE")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_41_openapi_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0041_delete_wckey(id)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.41/wckey/%s",
			self.basePath, id);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "DELETE")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_41_openapi_wckey_removed_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0041_get_account(account_name, with_assocs, with_coords, with_deleted)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.41/account/%s?with_assocs=%s&with_coords=%s&with_deleted=%s",
			self.basePath, account_name, http_util.encodeURIComponent(with_assocs), http_util.encodeURIComponent(with_coords), http_util.encodeURIComponent(with_deleted));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_41_openapi_accounts_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0041_get_accounts(description, DELETED, with_associations, with_coordinators, no_users_are_coords, users_are_coords)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.41/accounts?description=%s&DELETED=%s&WithAssociations=%s&WithCoordinators=%s&NoUsersAreCoords=%s&UsersAreCoords=%s",
			self.basePath, http_util.encodeURIComponent(description), http_util.encodeURIComponent(DELETED), http_util.encodeURIComponent(with_associations), http_util.encodeURIComponent(with_coordinators), http_util.encodeURIComponent(no_users_are_coords), http_util.encodeURIComponent(users_are_coords));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_41_openapi_accounts_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0041_get_association(account, cluster, default_qos, format, id, only_defaults, parent_account, partition, qos, usage_end, usage_start, user, with_usage, with_deleted, with_raw_qos, with_sub_accts, without_parent_info, without_parent_limits)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.41/association?account=%s&cluster=%s&default_qos=%s&format=%s&id=%s&only_defaults=%s&parent_account=%s&partition=%s&qos=%s&usage_end=%s&usage_start=%s&user=%s&with_usage=%s&with_deleted=%s&with_raw_qos=%s&with_sub_accts=%s&without_parent_info=%s&without_parent_limits=%s",
			self.basePath, http_util.encodeURIComponent(account), http_util.encodeURIComponent(cluster), http_util.encodeURIComponent(default_qos), http_util.encodeURIComponent(format), http_util.encodeURIComponent(id), http_util.encodeURIComponent(only_defaults), http_util.encodeURIComponent(parent_account), http_util.encodeURIComponent(partition), http_util.encodeURIComponent(qos), http_util.encodeURIComponent(usage_end), http_util.encodeURIComponent(usage_start), http_util.encodeURIComponent(user), http_util.encodeURIComponent(with_usage), http_util.encodeURIComponent(with_deleted), http_util.encodeURIComponent(with_raw_qos), http_util.encodeURIComponent(with_sub_accts), http_util.encodeURIComponent(without_parent_info), http_util.encodeURIComponent(without_parent_limits));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_41_openapi_assocs_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0041_get_associations(account, cluster, default_qos, format, id, only_defaults, parent_account, partition, qos, usage_end, usage_start, user, with_usage, with_deleted, with_raw_qos, with_sub_accts, without_parent_info, without_parent_limits)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.41/associations?account=%s&cluster=%s&default_qos=%s&format=%s&id=%s&only_defaults=%s&parent_account=%s&partition=%s&qos=%s&usage_end=%s&usage_start=%s&user=%s&with_usage=%s&with_deleted=%s&with_raw_qos=%s&with_sub_accts=%s&without_parent_info=%s&without_parent_limits=%s",
			self.basePath, http_util.encodeURIComponent(account), http_util.encodeURIComponent(cluster), http_util.encodeURIComponent(default_qos), http_util.encodeURIComponent(format), http_util.encodeURIComponent(id), http_util.encodeURIComponent(only_defaults), http_util.encodeURIComponent(parent_account), http_util.encodeURIComponent(partition), http_util.encodeURIComponent(qos), http_util.encodeURIComponent(usage_end), http_util.encodeURIComponent(usage_start), http_util.encodeURIComponent(user), http_util.encodeURIComponent(with_usage), http_util.encodeURIComponent(with_deleted), http_util.encodeURIComponent(with_raw_qos), http_util.encodeURIComponent(with_sub_accts), http_util.encodeURIComponent(without_parent_info), http_util.encodeURIComponent(without_parent_limits));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_41_openapi_assocs_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0041_get_cluster(cluster_name, classification, cluster, federation, flags, format, rpc_version, usage_end, usage_start, with_deleted, with_usage)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.41/cluster/%s?classification=%s&cluster=%s&federation=%s&flags=%s&format=%s&rpc_version=%s&usage_end=%s&usage_start=%s&with_deleted=%s&with_usage=%s",
			self.basePath, cluster_name, http_util.encodeURIComponent(classification), http_util.encodeURIComponent(cluster), http_util.encodeURIComponent(federation), http_util.encodeURIComponent(flags), http_util.encodeURIComponent(format), http_util.encodeURIComponent(rpc_version), http_util.encodeURIComponent(usage_end), http_util.encodeURIComponent(usage_start), http_util.encodeURIComponent(with_deleted), http_util.encodeURIComponent(with_usage));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_41_openapi_clusters_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0041_get_clusters(update_time)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.41/clusters?update_time=%s",
			self.basePath, http_util.encodeURIComponent(update_time));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_41_openapi_clusters_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0041_get_config()
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.41/config",
			self.basePath);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_41_openapi_slurmdbd_config_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0041_get_diag()
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.41/diag",
			self.basePath);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_41_openapi_slurmdbd_stats_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0041_get_instance(cluster, extra, format, instance_id, instance_type, node_list, time_end, time_start)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.41/instance?cluster=%s&extra=%s&format=%s&instance_id=%s&instance_type=%s&node_list=%s&time_end=%s&time_start=%s",
			self.basePath, http_util.encodeURIComponent(cluster), http_util.encodeURIComponent(extra), http_util.encodeURIComponent(format), http_util.encodeURIComponent(instance_id), http_util.encodeURIComponent(instance_type), http_util.encodeURIComponent(node_list), http_util.encodeURIComponent(time_end), http_util.encodeURIComponent(time_start));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_41_openapi_instances_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0041_get_instances(cluster, extra, format, instance_id, instance_type, node_list, time_end, time_start)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.41/instances?cluster=%s&extra=%s&format=%s&instance_id=%s&instance_type=%s&node_list=%s&time_end=%s&time_start=%s",
			self.basePath, http_util.encodeURIComponent(cluster), http_util.encodeURIComponent(extra), http_util.encodeURIComponent(format), http_util.encodeURIComponent(instance_id), http_util.encodeURIComponent(instance_type), http_util.encodeURIComponent(node_list), http_util.encodeURIComponent(time_end), http_util.encodeURIComponent(time_start));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_41_openapi_instances_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0041_get_job(job_id)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.41/job/%s",
			self.basePath, job_id);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_41_openapi_slurmdbd_jobs_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0041_get_jobs(account, association, cluster, constraints, scheduler_unset, scheduled_on_submit, scheduled_by_main, scheduled_by_backfill, job_started, exit_code, show_duplicates, skip_steps, disable_truncate_usage_time, whole_hetjob, disable_whole_hetjob, disable_wait_for_result, usage_time_as_submit_time, show_batch_script, show_job_environment, format, groups, job_name, partition, qos, reason, reservation, reservation_id, state, step, end_time, start_time, node, users, wckey)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.41/jobs?account=%s&association=%s&cluster=%s&constraints=%s&scheduler_unset=%s&scheduled_on_submit=%s&scheduled_by_main=%s&scheduled_by_backfill=%s&job_started=%s&exit_code=%s&show_duplicates=%s&skip_steps=%s&disable_truncate_usage_time=%s&whole_hetjob=%s&disable_whole_hetjob=%s&disable_wait_for_result=%s&usage_time_as_submit_time=%s&show_batch_script=%s&show_job_environment=%s&format=%s&groups=%s&job_name=%s&partition=%s&qos=%s&reason=%s&reservation=%s&reservation_id=%s&state=%s&step=%s&end_time=%s&start_time=%s&node=%s&users=%s&wckey=%s",
			self.basePath, http_util.encodeURIComponent(account), http_util.encodeURIComponent(association), http_util.encodeURIComponent(cluster), http_util.encodeURIComponent(constraints), http_util.encodeURIComponent(scheduler_unset), http_util.encodeURIComponent(scheduled_on_submit), http_util.encodeURIComponent(scheduled_by_main), http_util.encodeURIComponent(scheduled_by_backfill), http_util.encodeURIComponent(job_started), http_util.encodeURIComponent(exit_code), http_util.encodeURIComponent(show_duplicates), http_util.encodeURIComponent(skip_steps), http_util.encodeURIComponent(disable_truncate_usage_time), http_util.encodeURIComponent(whole_hetjob), http_util.encodeURIComponent(disable_whole_hetjob), http_util.encodeURIComponent(disable_wait_for_result), http_util.encodeURIComponent(usage_time_as_submit_time), http_util.encodeURIComponent(show_batch_script), http_util.encodeURIComponent(show_job_environment), http_util.encodeURIComponent(format), http_util.encodeURIComponent(groups), http_util.encodeURIComponent(job_name), http_util.encodeURIComponent(partition), http_util.encodeURIComponent(qos), http_util.encodeURIComponent(reason), http_util.encodeURIComponent(reservation), http_util.encodeURIComponent(reservation_id), http_util.encodeURIComponent(state), http_util.encodeURIComponent(step), http_util.encodeURIComponent(end_time), http_util.encodeURIComponent(start_time), http_util.encodeURIComponent(node), http_util.encodeURIComponent(users), http_util.encodeURIComponent(wckey));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_41_openapi_slurmdbd_jobs_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0041_get_qos(description, id, format, name, preempt_mode, with_deleted)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.41/qos?description=%s&id=%s&format=%s&name=%s&preempt_mode=%s&with_deleted=%s",
			self.basePath, http_util.encodeURIComponent(description), http_util.encodeURIComponent(id), http_util.encodeURIComponent(format), http_util.encodeURIComponent(name), http_util.encodeURIComponent(preempt_mode), http_util.encodeURIComponent(with_deleted));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_41_openapi_slurmdbd_qos_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0041_get_single_qos(qos, with_deleted)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.41/qos/%s?with_deleted=%s",
			self.basePath, qos, http_util.encodeURIComponent(with_deleted));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_41_openapi_slurmdbd_qos_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0041_get_tres()
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.41/tres",
			self.basePath);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_41_openapi_tres_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0041_get_user(name, with_deleted, with_assocs, with_coords, with_wckeys)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.41/user/%s?with_deleted=%s&with_assocs=%s&with_coords=%s&with_wckeys=%s",
			self.basePath, name, http_util.encodeURIComponent(with_deleted), http_util.encodeURIComponent(with_assocs), http_util.encodeURIComponent(with_coords), http_util.encodeURIComponent(with_wckeys));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_41_openapi_users_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0041_get_users(admin_level, default_account, default_wckey, with_assocs, with_coords, with_deleted, with_wckeys, without_defaults)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.41/users?admin_level=%s&default_account=%s&default_wckey=%s&with_assocs=%s&with_coords=%s&with_deleted=%s&with_wckeys=%s&without_defaults=%s",
			self.basePath, http_util.encodeURIComponent(admin_level), http_util.encodeURIComponent(default_account), http_util.encodeURIComponent(default_wckey), http_util.encodeURIComponent(with_assocs), http_util.encodeURIComponent(with_coords), http_util.encodeURIComponent(with_deleted), http_util.encodeURIComponent(with_wckeys), http_util.encodeURIComponent(without_defaults));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_41_openapi_users_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0041_get_wckey(id)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.41/wckey/%s",
			self.basePath, id);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_41_openapi_wckey_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0041_get_wckeys(cluster, format, id, name, only_defaults, usage_end, usage_start, user, with_usage, with_deleted)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.41/wckeys?cluster=%s&format=%s&id=%s&name=%s&only_defaults=%s&usage_end=%s&usage_start=%s&user=%s&with_usage=%s&with_deleted=%s",
			self.basePath, http_util.encodeURIComponent(cluster), http_util.encodeURIComponent(format), http_util.encodeURIComponent(id), http_util.encodeURIComponent(name), http_util.encodeURIComponent(only_defaults), http_util.encodeURIComponent(usage_end), http_util.encodeURIComponent(usage_start), http_util.encodeURIComponent(user), http_util.encodeURIComponent(with_usage), http_util.encodeURIComponent(with_deleted));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_41_openapi_wckey_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0041_post_accounts(v0_0_41_openapi_accounts_resp)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.41/accounts",
			self.basePath);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "POST")
	-- TODO: create a function to select proper accept
	--local var_content_type = { "application/json", "application/x-yaml" }
	req.headers:upsert("accept", "application/json")

	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	req:set_body(dkjson.encode(v0_0_41_openapi_accounts_resp))

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_41_openapi_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0041_post_accounts_association(v0_0_41_openapi_accounts_add_cond_resp)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.41/accounts_association",
			self.basePath);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "POST")
	-- TODO: create a function to select proper accept
	--local var_content_type = { "application/json", "application/x-yaml" }
	req.headers:upsert("accept", "application/json")

	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	req:set_body(dkjson.encode(v0_0_41_openapi_accounts_add_cond_resp))

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_41_openapi_accounts_add_cond_resp_str.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0041_post_associations(v0_0_41_openapi_assocs_resp)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.41/associations",
			self.basePath);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "POST")
	-- TODO: create a function to select proper accept
	--local var_content_type = { "application/json", "application/x-yaml" }
	req.headers:upsert("accept", "application/json")

	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	req:set_body(dkjson.encode(v0_0_41_openapi_assocs_resp))

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_41_openapi_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0041_post_clusters(update_time, v0_0_41_openapi_clusters_resp)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.41/clusters?update_time=%s",
			self.basePath, http_util.encodeURIComponent(update_time));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "POST")
	-- TODO: create a function to select proper accept
	--local var_content_type = { "application/json", "application/x-yaml" }
	req.headers:upsert("accept", "application/json")

	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	req:set_body(dkjson.encode(v0_0_41_openapi_clusters_resp))

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_41_openapi_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0041_post_config(v0_0_41_openapi_slurmdbd_config_resp)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.41/config",
			self.basePath);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "POST")
	-- TODO: create a function to select proper accept
	--local var_content_type = { "application/json", "application/x-yaml" }
	req.headers:upsert("accept", "application/json")

	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	req:set_body(dkjson.encode(v0_0_41_openapi_slurmdbd_config_resp))

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_41_openapi_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0041_post_qos(description, id, format, name, preempt_mode, with_deleted, v0_0_41_openapi_slurmdbd_qos_resp)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.41/qos?description=%s&id=%s&format=%s&name=%s&preempt_mode=%s&with_deleted=%s",
			self.basePath, http_util.encodeURIComponent(description), http_util.encodeURIComponent(id), http_util.encodeURIComponent(format), http_util.encodeURIComponent(name), http_util.encodeURIComponent(preempt_mode), http_util.encodeURIComponent(with_deleted));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "POST")
	-- TODO: create a function to select proper accept
	--local var_content_type = { "application/json", "application/x-yaml" }
	req.headers:upsert("accept", "application/json")

	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	req:set_body(dkjson.encode(v0_0_41_openapi_slurmdbd_qos_resp))

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_41_openapi_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0041_post_tres(v0_0_41_openapi_tres_resp)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.41/tres",
			self.basePath);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "POST")
	-- TODO: create a function to select proper accept
	--local var_content_type = { "application/json", "application/x-yaml" }
	req.headers:upsert("accept", "application/json")

	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	req:set_body(dkjson.encode(v0_0_41_openapi_tres_resp))

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_41_openapi_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0041_post_users(v0_0_41_openapi_users_resp)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.41/users",
			self.basePath);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "POST")
	-- TODO: create a function to select proper accept
	--local var_content_type = { "application/json", "application/x-yaml" }
	req.headers:upsert("accept", "application/json")

	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	req:set_body(dkjson.encode(v0_0_41_openapi_users_resp))

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_41_openapi_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0041_post_users_association(update_time, flags, v0_0_41_openapi_users_add_cond_resp)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.41/users_association?update_time=%s&flags=%s",
			self.basePath, http_util.encodeURIComponent(update_time), http_util.encodeURIComponent(flags));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "POST")
	-- TODO: create a function to select proper accept
	--local var_content_type = { "application/json", "application/x-yaml" }
	req.headers:upsert("accept", "application/json")

	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	req:set_body(dkjson.encode(v0_0_41_openapi_users_add_cond_resp))

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_41_openapi_users_add_cond_resp_str.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function slurmdb_api:slurmdb_v0041_post_wckeys(cluster, format, id, name, only_defaults, usage_end, usage_start, user, with_usage, with_deleted, v0_0_41_openapi_wckey_resp)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/slurmdb/v0.0.41/wckeys?cluster=%s&format=%s&id=%s&name=%s&only_defaults=%s&usage_end=%s&usage_start=%s&user=%s&with_usage=%s&with_deleted=%s",
			self.basePath, http_util.encodeURIComponent(cluster), http_util.encodeURIComponent(format), http_util.encodeURIComponent(id), http_util.encodeURIComponent(name), http_util.encodeURIComponent(only_defaults), http_util.encodeURIComponent(usage_end), http_util.encodeURIComponent(usage_start), http_util.encodeURIComponent(user), http_util.encodeURIComponent(with_usage), http_util.encodeURIComponent(with_deleted));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "POST")
	-- TODO: create a function to select proper accept
	--local var_content_type = { "application/json", "application/x-yaml" }
	req.headers:upsert("accept", "application/json")

	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json", "application/x-yaml" }
	req.headers:upsert("content-type", "application/json")

	req:set_body(dkjson.encode(v0_0_41_openapi_wckey_resp))

	-- api key in headers 'X-SLURM-USER-NAME'
	if self.api_key['X-SLURM-USER-NAME'] then
		req.headers:upsert("user", self.api_key['X-SLURM-USER-NAME'])
	end
	-- api key in headers 'X-SLURM-USER-TOKEN'
	if self.api_key['X-SLURM-USER-TOKEN'] then
		req.headers:upsert("token", self.api_key['X-SLURM-USER-TOKEN'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return slurmrestapi_v0_0_41_openapi_resp.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

return {
	new = new_slurmdb_api;
}
